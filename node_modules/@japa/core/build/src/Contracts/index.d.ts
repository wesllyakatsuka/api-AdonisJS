import { Test } from '../Test';
import { Group } from '../Group';
import { Suite } from '../Suite';
import { Runner } from '../Runner';
import { Emitter } from '../Emitter';
/**
 * Shape of test data set. Should be an array of a function that
 * returns an array
 */
export declare type DataSetNode = undefined | any[] | (() => any[] | Promise<any[]>);
/**
 * The cleanup function for test hooks
 */
export declare type TestHooksCleanupHandler<Context extends Record<any, any>> = (error: null | any, test: Test<Context, any>) => Promise<any> | any;
/**
 * The function that can be registered as a test hook
 */
export declare type TestHooksHandler<Context extends Record<any, any>> = (test: Test<Context, any>) => Promise<any> | any | TestHooksCleanupHandler<Context> | Promise<TestHooksCleanupHandler<Context>>;
/**
 * The cleanup function for group hooks
 */
export declare type GroupHooksCleanupHandler<Context extends Record<any, any>> = (error: null | any, group: Group<Context>) => Promise<any> | any;
/**
 * The function that can be registered as a group hook
 */
export declare type GroupHooksHandler<Context extends Record<any, any>> = (group: Group<Context>) => Promise<any> | any | GroupHooksCleanupHandler<Context> | Promise<GroupHooksCleanupHandler<Context>>;
/**
 * The cleanup function for suite hooks
 */
export declare type SuiteHooksCleanupHandler<Context extends Record<any, any>> = (error: null | any, suite: Suite<Context>) => Promise<any> | any;
/**
 * The function that can be registered as a suite hook
 */
export declare type SuiteHooksHandler<Context extends Record<any, any>> = (suite: Suite<Context>) => Promise<any> | any | SuiteHooksCleanupHandler<Context> | Promise<SuiteHooksCleanupHandler<Context>>;
/**
 * The function to execute the test
 */
export declare type TestExecutor<Context, DataSet> = DataSet extends any[] ? (context: Context, value: DataSet[number], done: (error?: any) => void) => void | Promise<void> : DataSet extends () => infer A ? (context: Context, value: Awaited<A> extends any[] ? Awaited<A>[number] : Awaited<A>, done?: (error?: any) => void) => void | Promise<void> : (context: Context, done: (error?: any) => void) => void | Promise<void>;
/**
 * Test configuration options.
 */
export declare type TestOptions = {
    title: string;
    tags: string[];
    timeout: number;
    waitsForDone?: boolean;
    executor?: TestExecutor<any, any>;
    isTodo?: boolean;
    isSkipped?: boolean;
    isFailing?: boolean;
    skipReason?: string;
    failReason?: string;
    retries?: number;
    meta: Record<string, any>;
};
/**
 * Data shared during "test:start" event
 */
export declare type TestStartNode = Omit<TestOptions, 'title'> & {
    title: {
        original: string;
        expanded: string;
        toString(): string;
    };
    dataset?: {
        size: number;
        index: number;
        row: any;
    };
};
/**
 * Data shared during "test:end" event
 */
export declare type TestEndNode = Omit<TestOptions, 'title'> & {
    title: {
        original: string;
        expanded: string;
        toString(): string;
    };
    duration: number;
    hasError: boolean;
    errors: {
        phase: 'setup' | 'test' | 'setup:cleanup' | 'teardown' | 'teardown:cleanup' | 'test:cleanup';
        error: Error;
    }[];
    retryAttempt?: number;
    dataset?: {
        size: number;
        index: number;
        row: any;
    };
};
/**
 * Group options
 */
export declare type GroupOptions = {
    title: string;
    meta: Record<string, any>;
};
/**
 * Data shared with "group:start" event
 */
export declare type GroupStartNode = GroupOptions;
/**
 * Data shared with "group:end" event
 */
export declare type GroupEndNode = GroupOptions & {
    hasError: boolean;
    errors: {
        phase: 'setup' | 'setup:cleanup' | 'teardown' | 'teardown:cleanup';
        error: Error;
    }[];
};
/**
 * Data shared with "suite:start" event
 */
export declare type SuiteStartNode = {
    name: string;
};
/**
 * Data shared with "suite:end" event
 */
export declare type SuiteEndNode = {
    name: string;
    hasError: boolean;
    errors: {
        phase: 'setup' | 'setup:cleanup' | 'teardown' | 'teardown:cleanup';
        error: Error;
    }[];
};
/**
 * Data shared with "runner:start" event
 */
export declare type RunnerStartNode = {};
/**
 * Data shared with "runner:end" event
 */
export declare type RunnerEndNode = {};
/**
 * Events emitted by the runner emitter. These can be extended as well
 */
export interface RunnerEvents {
    'test:start': TestStartNode;
    'test:end': TestEndNode;
    'group:start': GroupStartNode;
    'group:end': GroupEndNode;
    'suite:start': SuiteStartNode;
    'suite:end': SuiteEndNode;
    'runner:start': RunnerStartNode;
    'runner:end': RunnerEndNode;
    'uncaught:exception': Error;
}
/**
 * Options for filtering and running on selected tests
 */
export declare type FilteringOptions = {
    tags?: string[];
    groups?: string[];
    tests?: string[];
};
/**
 * Type for the reporter handler function
 */
export declare type ReporterHandlerContract = (runner: Runner<any>, emitter: Emitter) => void | Promise<void>;
/**
 * Type for a named reporter object.
 */
export declare type NamedReporterContract = {
    readonly name: string;
    handler: ReporterHandlerContract;
};
/**
 * Test reporters must adhere to the following contract
 */
export declare type ReporterContract = ReporterHandlerContract | NamedReporterContract;
/**
 * The test node inside the failure tree
 */
export declare type FailureTreeTestNode = {
    title: string;
    type: 'test';
    errors: TestEndNode['errors'];
};
/**
 * The group node inside the failure tree
 */
export declare type FailureTreeGroupNode = {
    name: string;
    type: 'group';
    errors: GroupEndNode['errors'];
    children: FailureTreeTestNode[];
};
/**
 * The suite node inside the failure tree
 */
export declare type FailureTreeSuiteNode = {
    name: string;
    type: 'suite';
    errors: SuiteEndNode['errors'];
    children: (FailureTreeTestNode | FailureTreeGroupNode)[];
};
/**
 * Runner summary properties
 */
export declare type RunnerSummary = {
    aggregates: {
        total: number;
        failed: number;
        passed: number;
        regression: number;
        skipped: number;
        todo: number;
        uncaughtExceptions: number;
    };
    duration: number;
    hasError: boolean;
    failureTree: FailureTreeSuiteNode[];
    failedTestsTitles: string[];
};
