/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ReadStream } from 'fs';
import { EventEmitter } from 'events';
import { Response } from 'superagent';
import { ApiRequest } from '../Request';
import { ApiResponse } from '../Response';
/**
 * The interface is copied from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/formidable/PersistentFile.d.ts, since superagent using formidable for parsing response
 * files.
 */
export interface SuperAgentResponseFile extends EventEmitter {
    open(): void;
    toJSON(): {
        length: number;
        mimetype: string | null;
        mtime: Date | null;
        size: number;
        filepath: string;
        originalFilename: string | null;
        hash?: string | null;
    };
    toString(): string;
    write(buffer: string, cb: () => void): void;
    end(cb: () => void): void;
    destroy(): void;
}
/**
 * Superagent response parser callback method. The method
 * receives an instance of the Node.js readable stream
 */
export declare type SuperAgentParser = (res: Response, callback: (err: Error | null, body: any) => void) => void;
/**
 * Superagent request serializer. The method receives the
 * request body object and must serialize it to a string
 */
export declare type SuperAgentSerializer = (obj: any) => string;
/**
 * Allowed multipart values
 */
export declare type MultipartValue = Blob | Buffer | ReadStream | string | boolean | number;
/**
 * Shape of custom cookies serializer.
 */
export declare type CookiesSerializer = {
    process(key: string, value: any, response: ApiResponse): any;
    prepare(key: string, value: any, request: ApiRequest): string;
};
/**
 * Config accepted by the API request class
 */
export declare type RequestConfig = {
    method: string;
    endpoint: string;
    baseUrl?: string;
    hooks?: {
        setup: SetupHandler[];
        teardown: TeardownHandler[];
    };
    serializers?: {
        cookie?: CookiesSerializer;
    };
};
/**
 * Shape of the parsed response cookie
 */
export declare type ResponseCookie = {
    name: string;
    value: any;
    path?: string;
    domain?: string;
    expires?: Date;
    maxAge?: number;
    secure?: true;
    httpOnly?: true;
    sameSite?: 'lax' | 'none' | 'strict';
};
/**
 * Response cookies jar
 */
export declare type ResponseCookies = Record<string, ResponseCookie>;
/**
 * Shape of the cookie accepted by the request
 */
export declare type RequestCookie = {
    name: string;
    value: any;
};
/**
 * Request cookies jar
 */
export declare type RequestCookies = Record<string, RequestCookie>;
/**
 * Setup handlers
 */
export declare type SetupCleanupHandler = (error: any | null, request: ApiRequest) => any | Promise<any>;
export declare type SetupHandler = (request: ApiRequest) => any | SetupCleanupHandler | Promise<any> | Promise<SetupCleanupHandler>;
/**
 * Teardown handlers
 */
export declare type TeardownCleanupHandler = (error: any | null, response: ApiResponse) => any | Promise<any>;
export declare type TeardownHandler = (response: ApiResponse) => any | TeardownCleanupHandler | Promise<any> | Promise<TeardownCleanupHandler>;
